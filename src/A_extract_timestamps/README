= CONFIGURATION =

the configuration json contains all the variables that change the way
the program decides whether or not a clip is in a larger video file.

A brief overview of what all the variables are and what they are
supposed to contain follows:

cache_dir
    Path to directory where all files will be cached. NOTE: the cache
    can get big so use a path with available space.

pred_dir
    Path to directory where predictions will be placed. These
    predictions include JSON files of the values used when deciding clip
    attribution as well as a plot of the distance function for
    troubleshooting.

workers
    The number of simultaneous processes allowed at one time. Increase
    to make faster at the cost of memory and CPU. NOTE: a higher value
    than 8 uses >32GB of RAM for raw files >10GB. Set to 0 to
    dynamically set workers to amount of available CPU cores.

n_comparison
    Frame offset from the minimum frame mean. Increase to compensate for
    lossier video at the cost of false positives.

match_decision_boundary
    Decision boundary when calculating video clip attribution.  Decrease
    to get more matches at the cost of false positives.

early_stopping_threshold
    Value at which the calculation loop for each sliding window stops.
    Increase to increase accuracy at the cost of increased computation.

= DECISION FUNCTION =

The decision function uses the fact that the plot of the distance function
between >>mean(original_frame) - mean(subset_frame)<< will in true positives
contain a small amount of frames with a very small value which then quickly
normalizes. Thus attribution is based on the following function (see
CONFIGURATION above for the meaning of the variables).

== PSEUDOCODE ==

>> SORT(distances)
>> clip IN raw IF distances[n_comparison] - distances[0] > match_decision_boundary

= ALGORITHM DESCRIPTION =

Before running the algorithm, `main.py` first iterates all keys in
{pred_dir}/raw.json to remove all raw files already checked, as well as
removing any subset in subsets for that raw file, in case you're resuming a
previous run.

FOREACH id IN speaker_video_mappings
    FOREACH raw_file IN id[raw_files]
        1 IF NOT cached(raw_file)
            1 generate dense numpy array
            2 save dense numpy array to disk
        2 FOREACH subset_file IN subset_files
            1 IF NOT cached(subset_file)
                1 generate dense numpy array
                2 save dense numpy array to disk
            2 generate timestamps; check if subset is match
            3 save timestamps and prediction results to disk
            4 IF match(raw_file, subset_file)
                1 REMOVE subset_file FROM subset_files
